[comment encoding = UTF-8 /]
[module generateEndpoint('http://thoughtress.com/WebService')/]
[import com::thoughtress::web_service::acceleo::files::generateXmlFormatter/]
[import com::thoughtress::web_service::acceleo::files::generateGenericFormatter/]
[import com::thoughtress::web_service::acceleo::files::generateFunctionProvider/]

[template public generateEndpoint(aEndpoint : Endpoint)]
[file (aEndpoint.name+'.java', false, 'UTF-8')]
package com.thoughtress.jsp.gen;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

/**
 * The Endpoint/Servlet entry point for the named Web Service
 * 
 */
@WebServlet("/[aEndpoint.name/]/*")
public class [aEndpoint.name/] extends HttpServlet {
    private static final long serialVersionUID = 1L;

    /**
     * Handle GET requests to the service
     * 
     * @param request HttpServletRequest object representing all request attributes
     * @param response HttpServletResponse to be used in the construction of a response
     */
    protected void doGet(HttpServletRequest request, HttpServletResponse response) {
        PrintWriter pw = null;
        try {
            pw = response.getWriter();
        } catch (IOException e) {
            e.printStackTrace();
        }
        MessageFormatter mf = getFormatter(request);
        if (mf == null) {
            sendHTTPError(response, HttpServletResponse.SC_BAD_REQUEST, "Unsupported Content Type");
            return;
        }
        MessagePart req = mf.parseToRequest(null, request);

        FunctionProvider func = getFunctionProvider(req);
        if (func == null) {
            String ret = mf.buildError(404, "Requested Method Not Found");
            pw.println(ret);
            return;
        }
        MessagePart resp = func.process(req);
        String ret = mf.parseToFormat(resp);
        pw.println(ret);
    }

    /**
     * Handle POST requests to the service
     * 
     * @param request HttpServletRequest object representing all request attributes
     * @param response HttpServletResponse to be used in the construction of a response
     */
    protected void doPost(HttpServletRequest request, HttpServletResponse response) {
        StringBuffer data = new StringBuffer();
        String line = null;
        try {
            BufferedReader reader = request.getReader();
            while ((line = reader.readLine()) != null)
                data.append(line);
        } catch (Exception e) { /* report an error */
        }

        PrintWriter pw = null;
        try {
            pw = response.getWriter();
        } catch (IOException e) {
            e.printStackTrace();
        }
        MessageFormatter mf = getFormatter(request);
        if (mf == null) {
            sendHTTPError(response, HttpServletResponse.SC_BAD_REQUEST, "Unsupported Content Type");
            return;
        }
        MessagePart req = mf.parseToRequest(data.toString(), request);

        FunctionProvider func = getFunctionProvider(req);
        if (func == null) {
            String ret = mf.buildError(404, "Requested Method Not Found");
            pw.println(ret);
            return;
        }
        MessagePart resp = func.process(req);
        String ret = mf.parseToFormat(resp);
        pw.println(ret);
    }

    protected void sendHTTPError(HttpServletResponse response, int code, String message) {
        try {
            response.sendError(code, message);
            return;
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }

    }

    protected MessageFormatter getFormatter(HttpServletRequest request) {
        MessageFormatter mf = null;
        [for (mf : MessageFormatter | aEndpoint.formatters)]
		[if (i = 1)]
		if ([mf.name/].match(request)){
			mf = new [mf.name/]();	
		}
		[else]
		else if ([mf.name/].match(request)){
			mf = new [mf.name/]();	
		}
		[/if]
		[/for]
        return mf;
    }

    protected FunctionProvider getFunctionProvider(MessagePart req) {
    	FunctionProvider func = null;
    	[for (fp : FunctionProvider | aEndpoint.functions)]
		[if (i = 1)]
		if ([fp.name/].match(req)){
	    	func = new [fp.name/]();
	    }
		[else]
		else if ([fp.name/].match(req)){
	    	func = new [fp.name/]();
	    }
		[/if]
		[/for]
        return func;
    }
}

[/file]
[for (aFormatter : XmlMessageFormatter | aEndpoint.formatters)]
		[aFormatter.generateXmlFormatter() /]
[/for]
[for (aFormatter : GenericMessageFormatter | aEndpoint.formatters)]
		[aFormatter.generateGenericFormatter() /]
[/for]
[for (aFunctionProvider : FunctionProvider | aEndpoint.functions)]
		[aFunctionProvider.generateFunctionProvider() /]
[/for]
	
[/template]
