[comment encoding = UTF-8 /]
[module generateStatic('http://thoughtress.com/WebService')/]

[template public generateStatic(aService : Service)]
[file ('Message.java', false, 'UTF-8')]
package com.thoughtress.jsp.gen;

import java.util.HashMap;

public class Message {
	private HashMap<String, String['[]'/]> params;
	public Message(){
		this.params = new HashMap<String, String['[]'/]>();
	}
	/**
	*Set a key,value pair in the Message parameters.
	*This will overwrite existing keys if already set.
	*
	*@param key   The key to be inserted
	*@param value A String array containing the value(s). Use a single element array for single values.
	*/
	public void setParam(String key, String['[]'/] value){
		params.put(key, value);
	}
	/**
	*Extend the Message parameters using key,value pairs from
	*the given HashMap.
	*This will overwrite existing keys if already set.
	*
	*@param map   A HashMap<String, String['[]'/]> containing the key,value
	*             pairs to extend the Message params by.
	*/
	public void setParams(HashMap<String, String['[]'/]> map){
		for (String key : map.keySet()){
			params.put(key, map.get(key));
		}
	}
	/**
	*@return A String array containing the Message parameter keys.
	*/
	public String['[]'/] getParamKeys(){
		return params.keySet().toArray(new String['[0]'/]);
	}
	/**
	*Get a required value from the Message params by key.
	*
	*@param key The key indexing the required value in Message params.
	*@return A String array containing the parameter value for the given key.
	*/
	public String['[]'/] getParam(String key){
		return params.get(key);
	}
	/**
	*Get all Message params
	*
	*@return A HashMap<String,String['[]'/]> containing all key,value pairs.
	*/
	public HashMap<String,String['[]'/]> getParams(){
		return params;
	}
}
[/file]
[file ('Request.java', false, 'UTF-8')]
package com.thoughtress.jsp.gen;

public class Request extends Message{
	private String method;
	/**
	*Create a new Request object with an empty method
	*/
	public Request(){
		super();
		method = "";
	}
	/**
	*Set the method of the Request
	*
	*@param meth  The method name of the Request
	*/
	public void setMethod(String meth){
		method = meth;
	}
	/**
	*@return The method name
	*/
	public String getMethod(){
		return method;
	}
}
[/file]

[file ('Response.java', false, 'UTF-8')]
package com.thoughtress.jsp.gen;

public class Response extends Message{
	private String responseName;
	/**
	*Create a new Response object with an empty response name
	*/
	public Response(){
		super();
		responseName = "";
	}
	/**
	*Set the response name of the Response
	*
	*@param name  The response name of the Response
	*/
	public void setResponseName(String name){
		responseName = name;
	}
	/**
	*@return The response name
	*/
	public String getResponseName(){
		return responseName;
	}
}
[/file]
[file ('MessageFormatter.java', false, 'UTF-8')]
package com.thoughtress.jsp.gen;

public abstract class MessageFormatter {
	/**
	*Advertise the message formats supported by this formatter.
	*It is suggested to proper MIME types.
	*
	*@return A String array containing the the supported message formats.
	*/
	public static String['[]'/] getTypes(){
		throw new UnsupportedOperationException("Not yet implemented");
	}
	/**
	*Parse the given data string to a Request object
	*This method may return null if the data is not a recognised message format.
	*
	*@param data  The data string to be parsed
	*@return      A Request object derived from the given data.
	*/
	public Request parseToRequest(String data){
		throw new UnsupportedOperationException("Not yet implemented");
	}
	/**
	*Parse the given Response object to a message format.
	*
	*@param  answer  The Response object to be parsed to string
	*@return         A Request object derived from the given data.
	*/
	public String parseToFormat(Response answer){
		throw new UnsupportedOperationException("Not yet implemented");
	}
}
[/file]
[file ('FunctionProvider.java', false, 'UTF-8')]
package com.thoughtress.jsp.gen;

public abstract class FunctionProvider {
	public static Boolean match(Request req){
		throw new UnsupportedOperationException("Not yet implemented");
	}
	/**
	*Process the given Request using the defined method.
	*
	*@param  req  The Request object to processed.
	*@return      A Response object constructed using the results of processing the request.
	*/
	public Response process(Request req){
		throw new UnsupportedOperationException("Not yet implemented");
	}
}
[/file]
[/template]
