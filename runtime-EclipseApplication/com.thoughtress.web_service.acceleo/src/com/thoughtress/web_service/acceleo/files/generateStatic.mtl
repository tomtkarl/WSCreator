[comment encoding = UTF-8 /]
[module generateStatic('http://thoughtress.com/WebService')/]

[template public generateStatic(aService : Service)]
[file ('Message.java', false, 'UTF-8')]
package com.thoughtress.jsp.gen;

import java.util.HashMap;

public class Message {
	private HashMap<String, String['[]'/]> params;
	public Message(){
		this.params = new HashMap<String, String['[]'/]>();
	}
	public void setParam(String key, String['[]'/] value){
		params.put(key, value);
	}
	public void setParams(HashMap<String, String['[]'/]> _params){
		for (String key : _params.keySet()){
			params.put(key, _params.get(key));
		}
	}
	public String['[]'/] getParamKeys(){
		return params.keySet().toArray(new String['[0]'/]);
	}
	public String['[]'/] getParam(String key){
		return params.get(key);
	}
	public HashMap<String,String['[]'/]> getParams(){
		return params;
	}
}
[/file]
[file ('Request.java', false, 'UTF-8')]
package com.thoughtress.jsp.gen;

public class Request extends Message{
	private String method;
	public Request(){
		super();
		method = "";
	}
	public void setMethod(String _method){
		method = _method;
	}
	public String getMethod(){
		return method;
	}
}
[/file]

[file ('Response.java', false, 'UTF-8')]
package com.thoughtress.jsp.gen;

public class Response extends Message{
	private String responseName;
	public Response(){
		super();
		responseName = "";
	}
	public void setResponseName(String name){
		responseName = name;
	}
	public String getResponseName(){
		return responseName;
	}
}
[/file]
[file ('MessageFormatter.java', false, 'UTF-8')]
package com.thoughtress.jsp.gen;

public abstract class MessageFormatter {
	public static String['[]'/] getTypes(){
		return null;
	}
	public Request parseToRequest(String data){
		return null;
	}
	public String parseToFormat(Response answer){
		return null;
	}
}
[/file]
[/template]
